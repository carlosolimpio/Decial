play.crypto.secret = "D07pTFzvHHV1za:p[8d/O0KEObtoyui6jFabA^hpBo<?=1NFBeO;2m_U=ev=TgV<"
play.http.parser.maxDiskBuffer = 100MB
parsers.anyContent.maxLength = 100MB

#Banco de dados in-memory
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:mem:play"
#db.default.user=root
#db.default.password="" 
#ebean.default="models.*"

#MySQL
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost:3306/ruufrpe?characterEncoding=UTF-8"
db.default.username=root
#db.default.password="sua_senha_da_conexao_aqui"
db.default.password="ruufrpe123"
ebean.default="models.*"

#JPA
jpa.default=defaultPersistenceUnit
PlayKeys.externalizeResources = false

play.evolutions{
db.default.enabled = true
}

#JNDI
db.default.jndiName=DefaultDS


api.moip{
  token = "2GTARNEJVG3YCLWPKXY6ZNVYFJNLJ7DH",
  key = "FFTJSA7GDLUTXIE6BRKEOVZTBKLYPZSJ3JJIPUSJ"
}

play.modules {
	enabled += "play.filters.cors.CORSModule"
	enabled += "play.filters.headers.SecurityHeadersModule"
  	enabled += "play.filters.hosts.AllowedHostsModule"
}

play.filters {

	enabled += play.filters.headers.SecurityHeadersFilter
  	enabled += play.filters.hosts.AllowedHostsFilter
  	
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  cors {
  
    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = ["GET", "POST"],
    
    # The path prefixes to filter.
    pathPrefixes = ["/api"],
    
    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null,
    
    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null,
    
    # The exposed headers
    exposedHeaders = ["Access-Control-Allow-Origin"]

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour

    # Whether to serve forbidden origins as non-CORS requests
    serveForbiddenOrigins = false
  }
  
  # Allowed hosts filter configuration
  hosts {

    # A list of valid hosts (e.g. "example.com") or suffixes of valid hosts (e.g. ".example.com")
    # Note that ".example.com" will match example.com and any subdomain of example.com, with or without a trailing dot.
    # "." matches all domains, and "" matches an empty or nonexistent host.
    allowed = ["localhost:8080", ".local", "http://127.0.0.1:8080"]
  }
  
  # Security headers filter configuration
  headers {

    # The X-Frame-Options header. If null, the header is not set.
    frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    contentSecurityPolicy = "default-src 'self'"

    # The Referrer-Policy header. If null, the header is not set.
    referrerPolicy = "origin-when-cross-origin, strict-origin-when-cross-origin"

    # If true, allow an action to use .withHeaders to replace one or more of the above headers
    allowActionSpecificHeaders = true
  }
}


